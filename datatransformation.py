# -*- coding: utf-8 -*-
"""DataTransformation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12t_opbJJntpLfSvUG-H_fytsY9W6aOBz
"""

import pandas as pd
from io import StringIO
import re
import streamlit as st
import base64

def transform_shipping_data(input_csv):
    # Baca data CSV
    df = pd.read_csv(StringIO(input_csv), header=None)

    # Ambil origin dari baris pertama
    origins = [x for x in df.iloc[0].tolist() if pd.notna(x) and str(x).startswith('Origin-')]

    # Ambil kolom dari baris kedua
    columns = [x for x in df.iloc[1].tolist() if pd.notna(x)]

    # Ambil data dari baris ketiga dan seterusnya
    data = df.iloc[2:]

    # Ekstrak informasi origin
    origin_info = []
    for origin in origins:
        match = re.match(r'Origin-([^#]+)#?(.*)', origin)
        if match:
            city = match.group(1)
            code = match.group(2) if match.group(2) else None
            origin_info.append({'city': city, 'code': code})

    # Hitung jumlah kolom per origin
    # Kolom dasar sebelum origin pertama: No. sampai DF (7 kolom)
    base_col_count = 7
    cols_per_origin = (len(columns) - base_col_count) // len(origins)

    # Buat list kolom dasar (kolom sebelum origin pertama)
    base_columns = columns[:base_col_count]

    # Buat list kolom untuk setiap origin (kolom setelah DF)
    origin_columns = columns[base_col_count:base_col_count + cols_per_origin]

    # Proses transformasi data
    transformed_data = []

    for _, row in data.iterrows():
        # Ambil data dasar (kolom sebelum origin pertama)
        base_data = row.iloc[:base_col_count].tolist()

        # Untuk setiap origin, ambil data yang sesuai
        for i, origin in enumerate(origin_info):
            start_col = base_col_count + i * cols_per_origin
            end_col = base_col_count + (i + 1) * cols_per_origin
            origin_data = row.iloc[start_col:end_col].tolist()

            # Gabungkan data dasar dengan data origin
            combined_data = base_data + [
                origin['city'],
                origin['code']
            ] + origin_data

            transformed_data.append(combined_data)

    # Buat kolom untuk dataframe hasil transformasi
    transformed_columns = base_columns + [
        'Origin City',
        'Origin Code'
    ] + origin_columns

    # Buat dataframe hasil transformasi
    result_df = pd.DataFrame(transformed_data, columns=transformed_columns)

    return result_df

def get_table_download_link(df):
    """Generates a link allowing the data in a given panda dataframe to be downloaded"""
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()  # some strings <-> bytes conversions necessary here
    href = f'<a href="data:file/csv;base64,{b64}" download="transformed_shipping_data.csv">Download transformed CSV file</a>'
    return href

# Streamlit app
def main():
    st.title("Data Transform")
    st.markdown("""
    This app transforms data into a more usable format.
    Upload your CSV file below and click the Transform button.
    """)

    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

    if uploaded_file is not None:
        # Read the uploaded file
        input_csv = uploaded_file.read().decode('utf-8')

        # Show preview of original data
        st.subheader("Original Data Preview")
        original_df = pd.read_csv(StringIO(input_csv), header=None)
        st.dataframe(original_df.head())

        # Transform button
        if st.button("Transform Data"):
            with st.spinner("Transforming data..."):
                try:
                    transformed_df = transform_shipping_data(input_csv)

                    # Show transformed data
                    st.subheader("Transformed Data Preview")
                    st.dataframe(transformed_df.head())

                    # Show download link
                    st.markdown(get_table_download_link(transformed_df), unsafe_allow_html=True)

                    st.success("Data transformation completed!")
                except Exception as e:
                    st.error(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
